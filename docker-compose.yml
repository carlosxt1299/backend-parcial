version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tasks_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: tasks_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tasks_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tasks_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin (Optional - Database Management UI)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tasks_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@tasks.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - tasks_network
    depends_on:
      - postgres

  # NestJS Backend (Optional - if you want to run the backend in Docker too)
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tasks_backend
    restart: unless-stopped
    environment:
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: password
      DATABASE_NAME: tasks_db
      JWT_SECRET: your-super-secret-jwt-key-production
      JWT_EXPIRATION: 7d
      PORT: 3000
      NODE_ENV: production
      CORS_ORIGIN: http://localhost:3001
    ports:
      - "3000:3000"
    networks:
      - tasks_network
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./dist:/app/dist
      - ./node_modules:/app/node_modules

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  tasks_network:
    driver: bridge
